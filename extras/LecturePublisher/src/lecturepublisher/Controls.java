/*
    Copyright 2012 David Fritz, Brian Gordon, Wira Mulia

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

 */

package lecturepublisher;

import plptool.gui.ProjectDriver;

/**
 *
 * @author wira
 */
public class Controls extends javax.swing.JFrame {

    private ProjectDriver plp;
    private PLPToolConnector connector;

    /** Creates new form Controls */
    public Controls(ProjectDriver plp, PLPToolConnector connector) {
        this.plp = plp;
        this.connector = connector;
        initComponents();
    }

    public void setRecordState(boolean b) {
        radioRecordWithAudio.setEnabled(!b);
        radioRecordWithoutAudio.setEnabled(!b);
        radioPlayAndOverlay.setEnabled(!b);
        tabbedPane.setEnabledAt(1, !b);
        tglBtnRecord.setSelected(b);
    }

    public void setPlaybackState(boolean b) {
        tabbedPane.setEnabledAt(0, !b);
        tglBtnPlayPause.setSelected(b);
    }

    public void updateComponents() {
        long t = connector.getLectureLength();
        if(t > 0) {
            sliderProgress.setMaximum((int) t);
            sliderProgress.setMinimum(0);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupRecord = new javax.swing.ButtonGroup();
        tabbedPane = new javax.swing.JTabbedPane();
        panelRecord = new javax.swing.JPanel();
        radioRecordWithAudio = new javax.swing.JRadioButton();
        radioPlayAndOverlay = new javax.swing.JRadioButton();
        radioRecordWithoutAudio = new javax.swing.JRadioButton();
        tglBtnRecord = new javax.swing.JToggleButton();
        lblLecturePublisher = new javax.swing.JLabel();
        panelPlayback = new javax.swing.JPanel();
        sliderProgress = new javax.swing.JSlider();
        tglBtnPlayPause = new javax.swing.JToggleButton();
        btnStop = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        txtStatus = new javax.swing.JTextField();

        setTitle("Lecture Controls");

        btnGroupRecord.add(radioRecordWithAudio);
        radioRecordWithAudio.setSelected(true);
        radioRecordWithAudio.setText("Record with audio (overwrite)");
        radioRecordWithAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioRecordWithAudioActionPerformed(evt);
            }
        });

        btnGroupRecord.add(radioPlayAndOverlay);
        radioPlayAndOverlay.setText("Play and overlay audio only");

        btnGroupRecord.add(radioRecordWithoutAudio);
        radioRecordWithoutAudio.setText("Record without audio");

        tglBtnRecord.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tglBtnRecord.setText("RECORD LECTURE");
        tglBtnRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglBtnRecordActionPerformed(evt);
            }
        });

        lblLecturePublisher.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        lblLecturePublisher.setText("Lecture Publisher");

        javax.swing.GroupLayout panelRecordLayout = new javax.swing.GroupLayout(panelRecord);
        panelRecord.setLayout(panelRecordLayout);
        panelRecordLayout.setHorizontalGroup(
            panelRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRecordLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioPlayAndOverlay)
                    .addComponent(radioRecordWithAudio)
                    .addComponent(radioRecordWithoutAudio)
                    .addComponent(lblLecturePublisher))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                .addComponent(tglBtnRecord)
                .addContainerGap())
        );
        panelRecordLayout.setVerticalGroup(
            panelRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRecordLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tglBtnRecord, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                    .addGroup(panelRecordLayout.createSequentialGroup()
                        .addComponent(radioRecordWithAudio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioPlayAndOverlay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioRecordWithoutAudio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                        .addComponent(lblLecturePublisher)))
                .addContainerGap())
        );

        tabbedPane.addTab("Record", panelRecord);

        tglBtnPlayPause.setText("Play");
        tglBtnPlayPause.setMaximumSize(new java.awt.Dimension(120, 23));
        tglBtnPlayPause.setMinimumSize(new java.awt.Dimension(120, 23));
        tglBtnPlayPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglBtnPlayPauseActionPerformed(evt);
            }
        });

        btnStop.setText("Stop");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelPlaybackLayout = new javax.swing.GroupLayout(panelPlayback);
        panelPlayback.setLayout(panelPlaybackLayout);
        panelPlaybackLayout.setHorizontalGroup(
            panelPlaybackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPlaybackLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPlaybackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPlaybackLayout.createSequentialGroup()
                        .addComponent(tglBtnPlayPause, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStop, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sliderProgress, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelPlaybackLayout.setVerticalGroup(
            panelPlaybackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPlaybackLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sliderProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelPlaybackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tglBtnPlayPause, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnStop))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Playback", panelPlayback);

        txtStatus.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                    .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                    .addComponent(txtStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radioRecordWithAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioRecordWithAudioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioRecordWithAudioActionPerformed

    private void tglBtnRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglBtnRecordActionPerformed
        if(tglBtnRecord.isSelected()) {
            if(radioRecordWithAudio.isSelected()) {
                connector.setRecordPlaybackParams(true, false);
                connector.hook("record");
            } else if(radioRecordWithoutAudio.isSelected()) {
                connector.setRecordPlaybackParams(false, false);
                connector.hook("record");
            } else if(radioPlayAndOverlay.isSelected()) {
                connector.setRecordPlaybackParams(false, true);
                connector.hook("replay");
            }
            setRecordState(true);
        } else {
            setRecordState(false);
            connector.hook("stop");
        }
    }//GEN-LAST:event_tglBtnRecordActionPerformed

    private void tglBtnPlayPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglBtnPlayPauseActionPerformed
        if(tglBtnPlayPause.isSelected()) {
            if(connector.getLectureLength() > 0) {
                connector.setRecordPlaybackParams(true, false);
                connector.hook("replay");
                updateComponents();
                (new ProgressUpdated(connector.getStartTime(), sliderProgress, progressBar)).start();
                setPlaybackState(true);
            } else {
                tglBtnPlayPause.setSelected(false);
            }
        } else {
            connector.hook("pause");
            setPlaybackState(false);
        }
    }//GEN-LAST:event_tglBtnPlayPauseActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        connector.hook("stop");
        setPlaybackState(false);
    }//GEN-LAST:event_btnStopActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btnGroupRecord;
    private javax.swing.JButton btnStop;
    private javax.swing.JLabel lblLecturePublisher;
    private javax.swing.JPanel panelPlayback;
    private javax.swing.JPanel panelRecord;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JRadioButton radioPlayAndOverlay;
    private javax.swing.JRadioButton radioRecordWithAudio;
    private javax.swing.JRadioButton radioRecordWithoutAudio;
    private javax.swing.JSlider sliderProgress;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JToggleButton tglBtnPlayPause;
    private javax.swing.JToggleButton tglBtnRecord;
    private javax.swing.JTextField txtStatus;
    // End of variables declaration//GEN-END:variables

    class ProgressUpdated extends Thread {
        private int startTime;
        private javax.swing.JSlider slider;
        private javax.swing.JProgressBar progress;
        private boolean stop;

        public ProgressUpdated(long startTime, javax.swing.JSlider slider,
                javax.swing.JProgressBar progress) {
            this.startTime = (int) ( startTime % (long) Math.pow(2, 32) );
            this.slider = slider;
            this.progress = progress;
            stop = false;
        }

        @Override
        public void run() {
            int sys_t = (int) ( System.currentTimeMillis() % (long) Math.pow(2, 32) );
            while(!stop && (sys_t-startTime) < progress.getMaximum()) {
                sys_t = (int) ( System.currentTimeMillis() % (long) Math.pow(2, 32) );
                slider.setValue((int) (sys_t-startTime));
                progress.setValue((int) (sys_t-startTime));
                try {
                    Thread.sleep(1000);
                } catch(Exception e) {}
            }
        }

        public void stopUpdate() {
            stop = true;
        }
    }

}
