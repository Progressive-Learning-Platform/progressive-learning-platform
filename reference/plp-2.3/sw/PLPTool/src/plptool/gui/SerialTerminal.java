/*
    Copyright 2010-2011 David Fritz, Brian Gordon, Wira Mulia

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

 */

package plptool.gui;

import gnu.io.CommPort;
import gnu.io.CommPortIdentifier;
import gnu.io.SerialPort;

import java.io.InputStream;
import java.io.OutputStream;

import javax.swing.JTextPane;
import javax.swing.text.StyledDocument;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import java.awt.Color;

import plptool.Msg;
import plptool.Constants;
import plptool.PLPToolbox;

/**
 *
 * @author wira
 */
public class SerialTerminal extends javax.swing.JFrame {

    private CommPort commPort;
    private CommPortIdentifier portIdentifier;
    protected InputStream in;
    private OutputStream out;
    private SerialPort port;

    protected boolean stop;

    /** Creates new form SerialTerminal */
    public SerialTerminal() {
        initComponents();

        stop = true;


        cmbBaud.removeAllItems();
        cmbBaud.addItem(9600);
        cmbBaud.addItem(57600);
        cmbBaud.addItem(115200);
        cmbBaud.setSelectedIndex(1);

        cmbPort.removeAllItems();
        if(PLPToolbox.getOS(false) == Constants.PLP_OS_LINUX_32 ||
           PLPToolbox.getOS(false) == Constants.PLP_OS_LINUX_64) {
            cmbPort.addItem("/dev/ttyUSB0");
            cmbPort.addItem("/dev/ttyUSB1");
            cmbPort.addItem("/dev/ttyS0");
            cmbPort.addItem("/dev/ttyS1");
        }
        if(PLPToolbox.getOS(false) == Constants.PLP_OS_WIN_32 ||
           PLPToolbox.getOS(false) == Constants.PLP_OS_WIN_64) {
            cmbPort.addItem("COM1");
            cmbPort.addItem("COM2");
            cmbPort.addItem("COM3");
            cmbPort.addItem("COM4");
        }
        else
            cmbPort.addItem("Specify your serial port here.");

        cmbOpts.removeAllItems();
        cmbOpts.addItem("8N1");

        cmbFormat.removeAllItems();
        cmbFormat.addItem("ASCII String");
        cmbFormat.addItem("1-byte raw");
        cmbFormat.addItem("Space-delimited raw (MSB first)");
    }

    protected void appendByte(char data) throws Exception {
        StyledDocument doc = console.getStyledDocument();

        SimpleAttributeSet attrib = new SimpleAttributeSet();
        StyleConstants.setBold(attrib, true);
        StyleConstants.setForeground(attrib, Color.RED);

        doc.insertString(doc.getLength(), data + "", attrib);

        console.setCaretPosition(doc.getLength() - 1);
    }

    protected void appendString(String str) {
        try {

        StyledDocument doc = console.getStyledDocument();

        SimpleAttributeSet attrib = new SimpleAttributeSet();
        StyleConstants.setBold(attrib, false);
        StyleConstants.setForeground(attrib, Color.GRAY);

        doc.insertString(doc.getLength(), "--- " + str + "\n", attrib);

        console.setCaretPosition(doc.getLength() - 1);

        } catch(Exception e) {

        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPort = new javax.swing.JLabel();
        cmbPort = new javax.swing.JComboBox();
        lblBaud = new javax.swing.JLabel();
        cmbBaud = new javax.swing.JComboBox();
        lblOpts = new javax.swing.JLabel();
        cmbOpts = new javax.swing.JComboBox();
        txtInput = new javax.swing.JTextField();
        btnOpen = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnSend = new javax.swing.JButton();
        cmbFormat = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextPane();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(plptool.gui.PLPToolApp.class).getContext().getResourceMap(SerialTerminal.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        lblPort.setText(resourceMap.getString("lblPort.text")); // NOI18N
        lblPort.setName("lblPort"); // NOI18N

        cmbPort.setEditable(true);
        cmbPort.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbPort.setName("cmbPort"); // NOI18N

        lblBaud.setText(resourceMap.getString("lblBaud.text")); // NOI18N
        lblBaud.setName("lblBaud"); // NOI18N

        cmbBaud.setEditable(true);
        cmbBaud.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbBaud.setName("cmbBaud"); // NOI18N

        lblOpts.setText(resourceMap.getString("lblOpts.text")); // NOI18N
        lblOpts.setName("lblOpts"); // NOI18N

        cmbOpts.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbOpts.setName("cmbOpts"); // NOI18N

        txtInput.setText(resourceMap.getString("txtInput.text")); // NOI18N
        txtInput.setEnabled(false);
        txtInput.setName("txtInput"); // NOI18N

        btnOpen.setText(resourceMap.getString("btnOpen.text")); // NOI18N
        btnOpen.setName("btnOpen"); // NOI18N
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        btnClose.setText(resourceMap.getString("btnClose.text")); // NOI18N
        btnClose.setEnabled(false);
        btnClose.setName("btnClose"); // NOI18N
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnClear.setText(resourceMap.getString("btnClear.text")); // NOI18N
        btnClear.setName("btnClear"); // NOI18N
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnSend.setText(resourceMap.getString("btnSend.text")); // NOI18N
        btnSend.setEnabled(false);
        btnSend.setName("btnSend"); // NOI18N
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        cmbFormat.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbFormat.setName("cmbFormat"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        console.setFont(resourceMap.getFont("console.font")); // NOI18N
        console.setName("console"); // NOI18N
        jScrollPane1.setViewportView(console);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(lblPort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBaud)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbBaud, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblOpts)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbOpts, 0, 113, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnOpen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnClose)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnClear))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmbFormat, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtInput, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSend)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPort)
                    .addComponent(cmbPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBaud)
                    .addComponent(cmbBaud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblOpts)
                    .addComponent(cmbOpts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOpen)
                    .addComponent(btnClose)
                    .addComponent(btnClear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSend)
                    .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        String portName = (String) cmbPort.getSelectedItem();
        int baudRate = (Integer) cmbBaud.getSelectedItem();
        try {
        appendString("Opening port " + portName + ".");
        portIdentifier = CommPortIdentifier.getPortIdentifier(portName);

        if ( portIdentifier.isCurrentlyOwned() )
        {
            appendString("Serial port " + portName + " is in use.");
            return;
        }
        else {
            commPort = portIdentifier.open(this.getClass().getName(),2000);

            if ( commPort instanceof SerialPort ) {
                port = (SerialPort) commPort;
                port.setSerialPortParams(baudRate, SerialPort.DATABITS_8,
                                               SerialPort.STOPBITS_1,
                                               SerialPort.PARITY_NONE);

                port.enableReceiveTimeout(1000);
                in = port.getInputStream();
                out = port.getOutputStream();
                btnClose.setEnabled(true);
                txtInput.setEnabled(true);
                btnSend.setEnabled(true);
                stop = false;
                (new SerialStreamReader()).start();
                appendString("Connected.");
            }
            else {
                appendString(portName + " is not a serial port.");
                return;
            }
        }
        } catch(Exception e) {
            appendString("Failed.");
            System.err.println(e);
        }
    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        try {

        stop = true;

        in.close();
        out.close();
        port.close();
        commPort.close();

        btnClose.setEnabled(false);
        txtInput.setEnabled(false);
        btnSend.setEnabled(false);
        appendString("Port closed.");

        } catch(Exception e) {

        }
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        console.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        try {

        switch(cmbFormat.getSelectedIndex()) {
            case 0:
                out.write(txtInput.getText().getBytes());
                break;

            case 1:
                out.write(plptool.PLPToolbox.parseNumInt(txtInput.getText()));
                break;

            case 2:
                break;

            default:
        }

        } catch(Exception e) {
            try {
                
            appendString("Send failed.");

            } catch(Exception eb) {

            }
        }
    }//GEN-LAST:event_btnSendActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SerialTerminal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnSend;
    private javax.swing.JComboBox cmbBaud;
    private javax.swing.JComboBox cmbFormat;
    private javax.swing.JComboBox cmbOpts;
    private javax.swing.JComboBox cmbPort;
    private javax.swing.JTextPane console;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBaud;
    private javax.swing.JLabel lblOpts;
    private javax.swing.JLabel lblPort;
    private javax.swing.JTextField txtInput;
    // End of variables declaration//GEN-END:variables


    class SerialStreamReader extends Thread {
        @Override
        public void run() {
            int data;

            try {

            while(!stop) {
                data = in.read();
                if(data > -1)
                    appendByte((char) data);
            }

            appendString("Stream reader exiting.");

            } catch(Exception e) {

            }
        }
    }
}
