package junit.plp.core.projectdriver;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import plptool.Constants;
import plptool.PLPAsmSource;
import plptool.gui.ProjectDriver;

//Testing ProjectDriver.open
/**
 * Open plp file specified by path.
 *
 * @param path
 *            Path to project file to load.
 * @param assemble
 *            Attempt to assemble after opening (if dirty is not set)
 * @return PLP_OK on successful operation, error code otherwise
 */
public class ProjectDriverOpenTest
{
	ProjectDriver projectDriver;
	String sampleProjectPath;
	List<String> sampleProjectAsms;
	
	@Before
	public void startUp()
	{
		projectDriver = new ProjectDriver(0);
		sampleProjectPath = "autotests/junit/plp/core/projectdriver/fsteptest.plp";
		sampleProjectAsms = new ArrayList<>();
		sampleProjectAsms.add("main.asm");
		sampleProjectAsms.add("libplp_uart.asm");
	}
	
	@After
	public void tearDown()
	{
		projectDriver = null;
	}
	
	@Test
	public void afterOpenAsmTesting()
	{
		// Tests asms in project
		projectDriver.open(sampleProjectPath, false);
		List<PLPAsmSource> asms = projectDriver.getAsms();
		for (PLPAsmSource asmFile : asms)
		{
			assertEquals("Retrieved asm file is in expected list?", true,
					sampleProjectAsms.contains(asmFile.getAsmFilePath()));
		}
	}
	
	@Test
	public void preProjectSettings()
	{
		// Check pre-open settings
		assertEquals("Asm list is empty on startup", 0, projectDriver.getAsms()
				.size());
		assertEquals("Binary files have not been changed", false,
				projectDriver.isDirty());
	}
	
	@Test
	public void openProjectTest()
	{
		// Open sample project
		assertEquals("Returns successful opening", Constants.PLP_OK,
				projectDriver.open(sampleProjectPath, false));
		assertEquals("Asm list is empty on startup", sampleProjectAsms.size(),
				projectDriver.getAsms().size());
		assertEquals("Binary files have not been changed", false,
				projectDriver.isDirty());
		assertEquals(
				"Open passing false on assembles, project is not assembled.",
				false, projectDriver.isAssembled());
		assertEquals("No files are modified after immediately opening", false,
				projectDriver.isModified());
	}
	
	@Test
	public void provideAssembleOnOpenAssembles()
	{
		assertEquals("Returns successful opening", Constants.PLP_OK,
				projectDriver.open(sampleProjectPath, true));
		assertEquals("Assembles on assemble parameter in open", true,
				projectDriver.isAssembled());
		assertEquals("is not dirty open assemble", false,
				projectDriver.isDirty());
		assertEquals("Asm list is empty on startup", sampleProjectAsms.size(),
				projectDriver.getAsms().size());
		assertEquals("No files are modified after assemble", false,
				projectDriver.isModified());
	}
	
}
