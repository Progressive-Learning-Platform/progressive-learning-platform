/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PLPConsole.java
 *
 * Created on 14 Des 10, 15:49:21
 */

package plptool.gui.frames;

import plptool.Constants;

import java.awt.Color;
import plptool.gui.ProjectDriver;

/**
 *
 * @author wira
 */
public class ConsoleFrame extends javax.swing.JFrame {

    ProjectDriver plp;
    ASMExplorer asmexplorer;
    boolean simmode = false;

    /** Creates new form PLPConsole */
    public ConsoleFrame(ProjectDriver plp) {
        this.plp = plp;
        initComponents();
        String outText = "os_code: " + plptool.PLPToolbox.getOS(false) + "\n";
        outText += "plpfile: " + plp.plpfile + "\n";
        outText += "arch: " + plp.getArch() + "\n";
        out.setText(outText);
        plptool.Msg.outputs.add(out);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmd = new javax.swing.JTextField();
        jscroll = new javax.swing.JScrollPane();
        out = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(plptool.gui.PLPToolApp.class).getContext().getResourceMap(ConsoleFrame.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setAlwaysOnTop(true);
        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setName("Form"); // NOI18N

        cmd.setBackground(resourceMap.getColor("cmd.background")); // NOI18N
        cmd.setForeground(resourceMap.getColor("cmd.foreground")); // NOI18N
        cmd.setText(resourceMap.getString("cmd.text")); // NOI18N
        cmd.setBorder(javax.swing.BorderFactory.createLineBorder(resourceMap.getColor("cmd.border.lineColor"))); // NOI18N
        cmd.setName("cmd"); // NOI18N
        cmd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmdKeyPressed(evt);
            }
        });

        jscroll.setName("jscroll"); // NOI18N

        out.setName("out"); // NOI18N
        jscroll.setViewportView(out);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cmd, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
            .addComponent(jscroll, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(cmd, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jscroll, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmdKeyPressed
        try {
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            String command = cmd.getText();
            String tokens[] = command.split(" ", 2);
            
            if(command.equals("q")) {
                System.exit(0);
            }
            else if(simmode) {
                if(command.equals("simmode")) {
                    simmode = false;
                    cmd.setBackground(Color.white);
                    cmd.setForeground(Color.black);
                } else {
                    plptool.mips.SimCLI.simCLCommand(command, plp);
                    if(asmexplorer != null) asmexplorer.updateTable();
                    if(plp.g_sim != null) plp.g_sim.updateComponents();
                    if(plp.sim != null) plp.updateComponents(true);
                }
            }

            else if(command.equals("reset")) {
                plp.g_dev.dispose();
                plp.desimulate();
                plp = new ProjectDriver(Constants.PLP_GUI_START_IDE, "plpmips");
                plp.g_dev.setVisible(true);
            }
            else if(command.equals("dark")) {
                plptool.Config.devBackground = java.awt.Color.BLACK;
                plptool.Config.devForeground = java.awt.Color.lightGray;
                plp.g_dev.changeFormatting();
            }
            else if(command.equals("defcolor")) {
                plptool.Config.devBackground = java.awt.Color.WHITE;
                plptool.Config.devForeground = java.awt.Color.BLACK;
                plp.g_dev.changeFormatting();
            }
            else if(command.equals("hloff")) {
                plptool.Config.devSyntaxHighlighting = false;
            }
            else if(command.equals("hlon")) {
                plptool.Config.devSyntaxHighlighting = true;
            }
            else if(command.equals("simcore")) {
                out.setText(plp.sim.toString());
            }
            else if(command.equals("hidetoolbar")) {
                plp.g_dev.setToolbarVisible(false);
            }
            else if(command.equals("showtoolbar")) {
                plp.g_dev.setToolbarVisible(true);
            }
            else if(command.equals("assemble")) {
                    plp.assemble();
                }
            else if(command.equals("simulate")) {
                    plp.simulate();
            }
            else if(command.equals("updategui")) {
                if(plp.g_sim != null) {
                    plp.updateComponents(true);
                    plp.g_ioreg.refreshModulesTable();
                }
            }
            else if(command.equals("triggercriterror")) {
                plp.triggerCriticalError();
            }
            else if(command.equals("closeproject")) {
                if(plp.g_dev != null) {
                    plp.g_dev.closeProject();
                }
            }
            else if(command.equals("printeditorcontents")) {
                if(plp.g_dev != null) {
                    plp.g_dev.getEditor().print();
                }
            }
            else if(command.equals("ignoresavedmods")) {
                plptool.Config.simIgnoreSavedSimState = true;
            }
            else if(command.equals("loadsavedmods")) {
                plptool.Config.simIgnoreSavedSimState = false;
            }
            else if(command.equals("asmexplorer")) {
                plp.g_dev.setVisible(false);
                plp.desimulate();

                if(asmexplorer == null) {
                    asmexplorer = new ASMExplorer(plp);
                }

                plp.sim = new plptool.mips.SimCore((plptool.mips.Asm) plp.asm, plp.asm.getAddrTable()[0]);
                plp.sim.reset();

                asmexplorer.setVisible(true);
                asmexplorer.updateTable();
            }

            else if(command.equals("simmode") && plp.sim != null) {
                if(!simmode) {
                    simmode = true;
                    cmd.setBackground(Color.black);
                    cmd.setForeground(Color.green);
                }
            }

            else if(command.equals("dumpundolist")) {
                plp.g_dev.getUndoManager().dumpList();
            }

                

            else if(tokens.length > 1) {
                if(tokens[0].equals("font")) {
                    plptool.Config.devFont = tokens[1];
                    plp.g_dev.changeFormatting();
                }
                if(tokens[0].equals("fontsize")) {
                    plptool.Config.devFontSize = Integer.parseInt(tokens[1]);
                    plp.g_dev.changeFormatting();
                }
                if(tokens[0].equals("hl")) {
                    plptool.Config.devSyntaxHighlighting = Boolean.parseBoolean(tokens[1]);
                    out.setText("cfgSyntaxHighlighting " + plptool.Config.devSyntaxHighlighting);
                }
                if(tokens[0].equals("open")) {
                    plp.open(tokens[1]);
                }
                if(tokens[0].equals("program")) {
                    plp.program(tokens[1]);
                }

                if(tokens[0].equals("simcl") && asmexplorer != null) {
                    String xcmd = "";
                    for(int i = 1; i < tokens.length; i++)
                        xcmd += tokens[i] + ((i != tokens.length - 1) ? " " : "");
                    plptool.mips.SimCLI.simCLCommand(xcmd, plp);
                    asmexplorer.updateTable();
                }

            }
            else {
                out.setText(":(");
                cmd.setText("");
                return;
            }
            cmd.setText("");
        }
        } catch(Exception e) {
            cmd.setText("");
            out.setText(e.toString());
        }
    }//GEN-LAST:event_cmdKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cmd;
    private javax.swing.JScrollPane jscroll;
    private javax.swing.JTextPane out;
    // End of variables declaration//GEN-END:variables

}

