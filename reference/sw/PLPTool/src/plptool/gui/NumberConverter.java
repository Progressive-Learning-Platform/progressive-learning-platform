/*
    Copyright 2010-2011 David Fritz, Brian Gordon, Wira Mulia

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

 */

package plptool.gui;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JSeparator;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.LayoutStyle;
import javax.swing.WindowConstants;

import plptool.Constants;
import plptool.Msg;

/**
 *
 * @author wira
 */
public class NumberConverter extends JFrame {

    private boolean standalone;

    /** Creates new form NumberConverter */
    public NumberConverter(boolean standalone) {
        initComponents();

        this.standalone = standalone;

        if(standalone) {
            this.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent winEvt) {
                    System.exit(-1);
                }
            });
        } else {
            KeyStroke escapeKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0, false);
            Action escapeAction = new AbstractAction() {
                public void actionPerformed(ActionEvent e) {
                    setVisible(false);
                }
            };

            getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(escapeKeyStroke, "ESCAPE");
            getRootPane().getActionMap().put("ESCAPE", escapeAction);

            this.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent winEvt) {
                    setVisible(false);
                }
            });
        }

        setLocationRelativeTo(null);

        cmbBase.removeAllItems();
        cmbBase.addItem("ASCII (Unicode)");
        cmbBase.addItem("Decimal");
        cmbBase.addItem("Binary");
        cmbBase.addItem("Octal");
        cmbBase.addItem("Hexadecimal");
    }

    private void convert() {
        boolean valid = false;
        long number = -1;

        try {


        switch(cmbBase.getSelectedIndex()) {
            case 0:
                if(txtInput.getText().length() == 1) {
                    number = txtInput.getText().charAt(0);
                    valid = true;
                }

                break;

            case 1:
                number = Long.parseLong(txtInput.getText());
                valid = true;
                break;
            case 2:
                number = Long.parseLong(txtInput.getText(), 2);
                valid = true;
                break;

            case 3:
                number = Long.parseLong(txtInput.getText(), 8);
                valid = true;
                break;

            case 4:
                number = Long.parseLong(txtInput.getText(), 16);
                valid = true;
                break;

         }

        if(valid) {
            txtASCII.setText("" + ((char) number));
            txtBinary.setText(Long.toBinaryString(number));
            txtDecimal.setText("" + number);
            txtOctal.setText(String.format("%o", number));
            txtHex.setText(String.format("%h", number));
        } else
            Msg.error("Can not convert the number '" + txtInput.getText() + "'", Constants.PLP_GENERIC_ERROR, null);

        } catch(Exception e) {
            Msg.error("Can not convert the number '" + txtInput.getText() + "'", Constants.PLP_GENERIC_ERROR, null);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new JTextField();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        jSeparator1 = new JSeparator();
        cmbBase = new JComboBox<String>();
        txtInput = new JTextField();
        jLabel4 = new JLabel();
        jLabel5 = new JLabel();
        txtBinary = new JTextField();
        jLabel6 = new JLabel();
        txtOctal = new JTextField();
        jLabel7 = new JLabel();
        txtHex = new JTextField();
        jLabel8 = new JLabel();
        txtDecimal = new JTextField();
        jLabel9 = new JLabel();
        txtASCII = new JTextField();
        btnClose = new JButton();
        btnConvert = new JButton();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(plptool.gui.PLPToolApp.class).getContext().getResourceMap(NumberConverter.class);
        jTextField2.setText(resourceMap.getString("jTextField2.text")); // NOI18N
        jTextField2.setName("jTextField2"); // NOI18N

        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        setResizable(false);

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jSeparator1.setName("jSeparator1"); // NOI18N

        cmbBase.setModel(new DefaultComboBoxModel<String>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbBase.setName("cmbBase"); // NOI18N

        txtInput.setText(resourceMap.getString("txtInput.text")); // NOI18N
        txtInput.setName("txtInput"); // NOI18N
        txtInput.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                txtInputKeyPressed(evt);
            }
        });

        jLabel4.setFont(resourceMap.getFont("jLabel4.font")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        txtBinary.setEditable(false);
        txtBinary.setHorizontalAlignment(JTextField.RIGHT);
        txtBinary.setText(resourceMap.getString("txtBinary.text")); // NOI18N
        txtBinary.setName("txtBinary"); // NOI18N

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        txtOctal.setEditable(false);
        txtOctal.setHorizontalAlignment(JTextField.RIGHT);
        txtOctal.setText(resourceMap.getString("txtOctal.text")); // NOI18N
        txtOctal.setName("txtOctal"); // NOI18N

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        txtHex.setEditable(false);
        txtHex.setHorizontalAlignment(JTextField.RIGHT);
        txtHex.setText(resourceMap.getString("txtHex.text")); // NOI18N
        txtHex.setName("txtHex"); // NOI18N

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        txtDecimal.setEditable(false);
        txtDecimal.setHorizontalAlignment(JTextField.RIGHT);
        txtDecimal.setText(resourceMap.getString("txtDecimal.text")); // NOI18N
        txtDecimal.setName("txtDecimal"); // NOI18N

        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        txtASCII.setEditable(false);
        txtASCII.setHorizontalAlignment(JTextField.RIGHT);
        txtASCII.setText(resourceMap.getString("txtASCII.text")); // NOI18N
        txtASCII.setName("txtASCII"); // NOI18N

        btnClose.setText(resourceMap.getString("btnClose.text")); // NOI18N
        btnClose.setName("btnClose"); // NOI18N
        btnClose.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnConvert.setText(resourceMap.getString("btnConvert.text")); // NOI18N
        btnConvert.setName("btnConvert"); // NOI18N
        btnConvert.setPreferredSize(new Dimension(46, 27));
        btnConvert.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnConvertActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(jLabel3, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtInput)
                            .addComponent(cmbBase, 0, 495, Short.MAX_VALUE))))
                .addContainerGap())
            .addComponent(jSeparator1, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(553, Short.MAX_VALUE))
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtASCII)
                    .addComponent(txtDecimal)
                    .addComponent(txtHex)
                    .addComponent(txtOctal)
                    .addComponent(txtBinary, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 493, GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(367, Short.MAX_VALUE)
                .addComponent(btnConvert, GroupLayout.PREFERRED_SIZE, 112, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClose, GroupLayout.PREFERRED_SIZE, 118, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbBase, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtInput, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtBinary, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtOctal, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtHex, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtDecimal, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtASCII, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose)
                    .addComponent(btnConvert, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        if(standalone)
            System.exit(-1);

        setVisible(false);
    }//GEN-LAST:event_btnCloseActionPerformed

    private void txtInputKeyPressed(KeyEvent evt) {//GEN-FIRST:event_txtInputKeyPressed
        if(evt.isActionKey() || evt.getKeyCode() == KeyEvent.VK_ENTER) {
            convert();
        }
    }//GEN-LAST:event_txtInputKeyPressed

    private void btnConvertActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnConvertActionPerformed
            convert();
    }//GEN-LAST:event_btnConvertActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NumberConverter(true).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btnClose;
    private JButton btnConvert;
    private JComboBox<String> cmbBase;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JLabel jLabel9;
    private JSeparator jSeparator1;
    private JTextField jTextField2;
    private JTextField txtASCII;
    private JTextField txtBinary;
    private JTextField txtDecimal;
    private JTextField txtHex;
    private JTextField txtInput;
    private JTextField txtOctal;
    // End of variables declaration//GEN-END:variables

}
